openapi: 3.0.3
info:
  title: Terra Axon Server
  description: |
    Terra Axon Server

  version: 0.0.1

security:
  - authorization: [openiAd, email, profile]
  - bearerAuth: []

paths:
  # Unauthenticated Paths
  /status:
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Public]
      responses:
        "200":
          description: Service can process requests
        "500":
          description: |
            Service cannot process requests. That might be because dependent services are
            unavailable, or because there is a problem with the service itself.

  /version:
    get:
      security: []
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [Public]
      responses:
        "200":
          description: Version properties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionProperties"

  # Unauthenticated Auth Paths
  /auth/exchangeAuthorizationCode:
    parameters:
      - $ref: "#/components/parameters/AuthCode"
    get:
      security: []
      summary: |
        Exchange an authorization code for an access token and refresh token.
      operationId: getAuthTokens
      tags: [Authorization]
      responses:
        "200":
          $ref: "#/components/responses/TokenResultResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "500":
          $ref: "#/components/responses/ServerError"

  /auth/refreshToken:
    parameters:
      - $ref: "#/components/parameters/RefreshToken"
    get:
      security: []
      summary: |
        Pass in a refresh token to receive an access token.
      operationId: getRefreshedAccessToken
      tags: [Authorization]
      responses:
        "200":
          $ref: "#/components/responses/TokenResultResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/PermissionDenied"
        "500":
          $ref: "#/components/responses/ServerError"

  # GetFile paths
  /api/workspaces/v1/{workspaceId}/resources/{resourceId}/file:
    parameters:
      - $ref: "#/components/parameters/WorkspaceId"
      - $ref: "#/components/parameters/ResourceId"
      - in: query
        name: convertTo
        description: A file type to convert the requested file into before returning
        schema:
          type: string
    get:
      summary: Retrieves a file referenced by the given WSM resource
      operationId: getFile
      tags: [GetFile]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: binary

  /api/workspaces/v1/{workspaceId}/resources/{resourceId}/file/objects/{objectPath}:
    parameters:
      - $ref: "#/components/parameters/WorkspaceId"
      - $ref: "#/components/parameters/ResourceId"
      - $ref: "#/components/parameters/ObjectPath"
      - in: query
        name: convertTo
        description: A file type to convert the requested file into before returning
        schema:
          type: string
    get:
      summary: Retrieves an object in a provided file containing WSM resource
      operationId: getFileInBucket
      tags: [GetFile]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: binary

components:
  schemas:
    # Please keep alphabetized
    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    TokenReport:
      type: object
      required: [accessToken, tokenType]
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        tokenType:
          type: string
        scope:
          type: string
        refreshToken:
          type: string
        idToken:
          type: string

    VersionProperties:
      type: object
      required: [gitTag, gitHash, github, build]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

    Conflict:
      description: Request conflicts with current state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

    TokenResultResponse:
      description: Result of a token request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenReport"

  parameters:
    ResourceId:
      name: resourceId
      in: path
      description: A UUID used to identify a resource in a WSM workspace.
      required: true
      schema:
        type: string
        format: uuid

    WorkspaceId:
      name: workspaceId
      in: path
      description: A UUID to used to identify a WSM workspace
      required: true
      schema:
        type: string
        format: uuid

    ObjectPath:
      name: objectPath
      in: path
      description: File path to object
      required: true
      schema:
        type: string

    AuthCode:
      name: authCode
      description: OAuth 2.0 authorization code provided by Google.
      in: query
      required: true
      schema:
        type: string

    RefreshToken:
      name: refreshToken
      description: OAuth 2.0 refresh token provided by Google.
      in: query
      required: true
      schema:
        type: string

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer
